!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("dscc",[],t):"object"==typeof exports?exports.dscc=t():e.dscc=t()}(window,function(){return function(e){var t={};function R(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,R),o.l=!0,o.exports}return R.m=e,R.c=t,R.d=function(e,t,n){R.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},R.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},R.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return R.d(t,"a",t),t},R.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},R.p="",R(R.s="./src/index.ts")}({"./node_modules/querystringify/index.js":
/*!**********************************************!*\
  !*** ./node_modules/querystringify/index.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,R){"use strict";var n=Object.prototype.hasOwnProperty;function o(e){return decodeURIComponent(e.replace(/\+/g," "))}t.stringify=function(e,t){t=t||"";var R=[];for(var o in"string"!=typeof t&&(t="?"),e)n.call(e,o)&&R.push(encodeURIComponent(o)+"="+encodeURIComponent(e[o]));return R.length?t+R.join("&"):""},t.parse=function(e){for(var t,R=/([^=?&]+)=?([^&]*)/g,n={};t=R.exec(e);){var r=o(t[1]),C=o(t[2]);r in n||(n[r]=C)}return n}},"./node_modules/requires-port/index.js":
/*!*********************************************!*\
  !*** ./node_modules/requires-port/index.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,R){"use strict";e.exports=function(e,t){if(t=t.split(":")[0],!(e=+e))return!1;switch(t){case"http":case"ws":return 80!==e;case"https":case"wss":return 443!==e;case"ftp":return 21!==e;case"gopher":return 70!==e;case"file":return!1}return 0!==e}},"./node_modules/url-parse/index.js":
/*!*****************************************!*\
  !*** ./node_modules/url-parse/index.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,R){"use strict";(function(t){var n=R(/*! requires-port */"./node_modules/requires-port/index.js"),o=R(/*! querystringify */"./node_modules/querystringify/index.js"),r=/^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i,C=/^[A-Za-z][A-Za-z0-9+-.]*:\/\//,E=[["#","hash"],["?","query"],["/","pathname"],["@","auth",1],[NaN,"host",void 0,1,1],[/:(\d+)$/,"port",void 0,1],[NaN,"hostname",void 0,1,1]],s={hash:1,query:1};function a(e){var R,n={},o=typeof(e=e||t.location||{});if("blob:"===e.protocol)n=new N(unescape(e.pathname),{});else if("string"===o)for(R in n=new N(e,{}),s)delete n[R];else if("object"===o){for(R in e)R in s||(n[R]=e[R]);void 0===n.slashes&&(n.slashes=C.test(e.href))}return n}function i(e){var t=r.exec(e);return{protocol:t[1]?t[1].toLowerCase():"",slashes:!!t[2],rest:t[3]}}function N(e,t,R){if(!(this instanceof N))return new N(e,t,R);var r,C,s,c,_,u,U=E.slice(),Y=typeof t,p=this,l=0;for("object"!==Y&&"string"!==Y&&(R=t,t=null),R&&"function"!=typeof R&&(R=o.parse),t=a(t),r=!(C=i(e||"")).protocol&&!C.slashes,p.slashes=C.slashes||r&&t.slashes,p.protocol=C.protocol||t.protocol||"",e=C.rest,C.slashes||(U[2]=[/(.*)/,"pathname"]);l<U.length;l++)s=(c=U[l])[0],u=c[1],s!=s?p[u]=e:"string"==typeof s?~(_=e.indexOf(s))&&("number"==typeof c[2]?(p[u]=e.slice(0,_),e=e.slice(_+c[2])):(p[u]=e.slice(_),e=e.slice(0,_))):(_=s.exec(e))&&(p[u]=_[1],e=e.slice(0,_.index)),p[u]=p[u]||r&&c[3]&&t[u]||"",c[4]&&(p[u]=p[u].toLowerCase());R&&(p.query=R(p.query)),r&&t.slashes&&"/"!==p.pathname.charAt(0)&&(""!==p.pathname||""!==t.pathname)&&(p.pathname=function(e,t){for(var R=(t||"/").split("/").slice(0,-1).concat(e.split("/")),n=R.length,o=R[n-1],r=!1,C=0;n--;)"."===R[n]?R.splice(n,1):".."===R[n]?(R.splice(n,1),C++):C&&(0===n&&(r=!0),R.splice(n,1),C--);return r&&R.unshift(""),"."!==o&&".."!==o||R.push(""),R.join("/")}(p.pathname,t.pathname)),n(p.port,p.protocol)||(p.host=p.hostname,p.port=""),p.username=p.password="",p.auth&&(c=p.auth.split(":"),p.username=c[0]||"",p.password=c[1]||""),p.origin=p.protocol&&p.host&&"file:"!==p.protocol?p.protocol+"//"+p.host:"null",p.href=p.toString()}N.prototype={set:function(e,t,R){var r=this;switch(e){case"query":"string"==typeof t&&t.length&&(t=(R||o.parse)(t)),r[e]=t;break;case"port":r[e]=t,n(t,r.protocol)?t&&(r.host=r.hostname+":"+t):(r.host=r.hostname,r[e]="");break;case"hostname":r[e]=t,r.port&&(t+=":"+r.port),r.host=t;break;case"host":r[e]=t,/:\d+$/.test(t)?(t=t.split(":"),r.port=t.pop(),r.hostname=t.join(":")):(r.hostname=t,r.port="");break;case"protocol":r.protocol=t.toLowerCase(),r.slashes=!R;break;case"pathname":case"hash":if(t){var C="pathname"===e?"/":"#";r[e]=t.charAt(0)!==C?C+t:t}else r[e]=t;break;default:r[e]=t}for(var s=0;s<E.length;s++){var a=E[s];a[4]&&(r[a[1]]=r[a[1]].toLowerCase())}return r.origin=r.protocol&&r.host&&"file:"!==r.protocol?r.protocol+"//"+r.host:"null",r.href=r.toString(),r},toString:function(e){e&&"function"==typeof e||(e=o.stringify);var t,R=this,n=R.protocol;n&&":"!==n.charAt(n.length-1)&&(n+=":");var r=n+(R.slashes?"//":"");return R.username&&(r+=R.username,R.password&&(r+=":"+R.password),r+="@"),r+=R.host+R.pathname,(t="object"==typeof R.query?e(R.query):R.query)&&(r+="?"!==t.charAt(0)?"?"+t:t),R.hash&&(r+=R.hash),r}},N.extractProtocol=i,N.location=a,N.qs=o,e.exports=N}).call(this,R(/*! ./../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */function(e,t){var R;R=function(){return this}();try{R=R||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(R=window)}e.exports=R},"./src/data-transform.ts":
/*!*******************************!*\
  !*** ./src/data-transform.ts ***!
  \*******************************/
/*! no static exports found */function(e,t,R){"use strict";Object.defineProperty(t,"__esModule",{value:!0});
/*!
  Copyright 2018 Google LLC

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  https://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
var n=R(/*! ./impl */"./src/impl.ts"),o=function(e,t,R){return t.map(function(t){for(var o,r,C={isComparisonRow:e},E=0;E<t.length;E++){var s=R[E],a=s.semantic===n.SchemaSemanticType.IMAGE?(o=t[E],void 0,{originalUrl:(r=o.split("  "))[0],proxiedUrl:r[1],altText:r[2]}):t[E];C[s.name]=a}return C})},r=function(e){return{concept:e.concept,id:e.name,name:e.label,type:function(e){if(e.semantic===n.SchemaSemanticType.CURRENCY){var t=n.SchemaSemanticType[e.semantic]+"_"+n.SchemaSemanticOption[e.semanticOption];return n.FieldType[t]}return n.FieldType[n.SchemaSemanticType[e.semantic]]}(e)}};t.transformData=function(e){var t,R;return{style:e.data.style,type:e.data.type,fieldById:(t=e.data.schema,R={},t.forEach(function(e){R[e.name]=r(e)}),R),fields:e.data.schema.map(r),rows:function(e,t){var R=o(!0,e.comparisonRows,t),n=o(!1,e.primaryRows,t);return R.concat(n)}(e.data.rows,e.data.schema)}}},"./src/impl.ts":
/*!*********************!*\
  !*** ./src/impl.ts ***!
  \*********************/
/*! no static exports found */function(e,t,R){"use strict";var n=this&&this.__awaiter||function(e,t,R,n){return new(R||(R=Promise))(function(o,r){function C(e){try{s(n.next(e))}catch(e){r(e)}}function E(e){try{s(n.throw(e))}catch(e){r(e)}}function s(e){e.done?o(e.value):new R(function(t){t(e.value)}).then(C,E)}s((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var R,n,o,r,C={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:E(0),throw:E(1),return:E(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function E(r){return function(E){return function(r){if(R)throw new TypeError("Generator is already executing.");for(;C;)try{if(R=1,n&&(o=n[2&r[0]?"return":r[0]?"throw":"next"])&&!(o=o.call(n,r[1])).done)return o;switch(n=0,o&&(r=[0,o.value]),r[0]){case 0:case 1:o=r;break;case 4:return C.label++,{value:r[1],done:!1};case 5:C.label++,n=r[1],r=[0];continue;case 7:r=C.ops.pop(),C.trys.pop();continue;default:if(!(o=(o=C.trys).length>0&&o[o.length-1])&&(6===r[0]||2===r[0])){C=0;continue}if(3===r[0]&&(!o||r[1]>o[0]&&r[1]<o[3])){C.label=r[1];break}if(6===r[0]&&C.label<o[1]){C.label=o[1],o=r;break}if(o&&C.label<o[2]){C.label=o[2],C.ops.push(r);break}o[2]&&C.ops.pop(),C.trys.pop();continue}r=t.call(e,C)}catch(e){r=[6,e],n=0}finally{R=o=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,E])}}},r=this;Object.defineProperty(t,"__esModule",{value:!0});
/*!
  Copyright 2018 Google LLC

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  https://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
var C,E=R(/*! ./data-transform */"./src/data-transform.ts"),s=R(/*! url-parse */"./node_modules/url-parse/index.js");!function(e){e.RENDER="RENDER"}(t.MessageType||(t.MessageType={})),function(e){e.Metric="METRIC",e.Dimension="DIMENSION"}(t.ConceptType||(t.ConceptType={})),function(e){e.STRING="STRING",e.NUMBER="NUMBER",e.BOOLEAN="BOOLEAN"}(t.SchemaDataType||(t.SchemaDataType={})),function(e){e.YEAR="YEAR",e.YEAR_QUARTER="YEAR_QUARTER",e.YEAR_MONTH="YEAR_MONTH",e.YEAR_WEEK="YEAR_WEEK",e.YEAR_MONTH_DAY="YEAR_MONTH_DAY",e.YEAR_MONTH_DAY_HOUR="YEAR_MONTH_DAY_HOUR",e.QUARTER="QUARTER",e.MONTH="MONTH",e.WEEK="WEEK",e.MONTH_DAY="MONTH_DAY",e.DAY_OF_WEEK="DAY_OF_WEEK",e.DAY="DAY",e.HOUR="HOUR",e.MINUTE="MINUTE",e.DURATION="DURATION",e.COUNTRY="COUNTRY",e.COUNTRY_CODE="COUNTRY_CODE",e.CONTINENT="CONTINENT",e.CONTINENT_CODE="CONTINENT_CODE",e.SUB_CONTINENT="SUB_CONTINENT",e.SUB_CONTINENT_CODE="SUB_CONTINENT_CODE",e.REGION="REGION",e.REGION_CODE="REGION_CODE",e.CITY="CITY",e.CITY_CODE="CITY_CODE",e.METRO_CODE="METRO_CODE",e.LATITUDE_LONGITUDE="LATITUDE_LONGITUDE",e.NUMBER="NUMBER",e.PERCENT="PERCENT",e.TEXT="TEXT",e.BOOLEAN="BOOLEAN",e.URL="URL",e.IMAGE="IMAGE",e.CURRENCY="CURRENCY"}(t.SchemaSemanticType||(t.SchemaSemanticType={})),function(e){e.AED="AED",e.ALL="ALL",e.ARS="ARS",e.AUD="AUD",e.BDT="BDT",e.BGN="BGN",e.BOB="BOB",e.BRL="BRL",e.CAD="CAD",e.CDF="CDF",e.CHF="CHF",e.CLP="CLP",e.CNY="CNY",e.COP="COP",e.CRC="CRC",e.CZK="CZK",e.DKK="DKK",e.DOP="DOP",e.EGP="EGP",e.ETB="ETB",e.EUR="EUR",e.GBP="GBP",e.HKD="HKD",e.HRK="HRK",e.HUF="HUF",e.IDR="IDR",e.ILS="ILS",e.INR="INR",e.IRR="IRR",e.ISK="ISK",e.JMD="JMD",e.JPY="JPY",e.KRW="KRW",e.LKR="LKR",e.LTL="LTL",e.MNT="MNT",e.MVR="MVR",e.MXN="MXN",e.MYR="MYR",e.NOK="NOK",e.NZD="NZD",e.PAB="PAB",e.PEN="PEN",e.PHP="PHP",e.PKR="PKR",e.PLN="PLN",e.RON="RON",e.RSD="RSD",e.RUB="RUB",e.SAR="SAR",e.SEK="SEK",e.SGD="SGD",e.THB="THB",e.TRY="TRY",e.TWD="TWD",e.TZS="TZS",e.UAH="UAH",e.USD="USD",e.UYU="UYU",e.VEF="VEF",e.VND="VND",e.YER="YER",e.ZAR="ZAR"}(t.SchemaSemanticOption||(t.SchemaSemanticOption={})),function(e){e.YEAR="YEAR",e.YEAR_QUARTER="YEAR_QUARTER",e.YEAR_MONTH="YEAR_MONTH",e.YEAR_WEEK="YEAR_WEEK",e.YEAR_MONTH_DAY="YEAR_MONTH_DAY",e.YEAR_MONTH_DAY_HOUR="YEAR_MONTH_DAY_HOUR",e.QUARTER="QUARTER",e.MONTH="MONTH",e.WEEK="WEEK",e.MONTH_DAY="MONTH_DAY",e.DAY_OF_WEEK="DAY_OF_WEEK",e.DAY="DAY",e.HOUR="HOUR",e.MINUTE="MINUTE",e.DURATION="DURATION",e.COUNTRY="COUNTRY",e.COUNTRY_CODE="COUNTRY_CODE",e.CONTINENT="CONTINENT",e.CONTINENT_CODE="CONTINENT_CODE",e.SUB_CONTINENT="SUB_CONTINENT",e.SUB_CONTINENT_CODE="SUB_CONTINENT_CODE",e.REGION="REGION",e.REGION_CODE="REGION_CODE",e.CITY="CITY",e.CITY_CODE="CITY_CODE",e.METRO_CODE="METRO_CODE",e.LATITUDE_LONGITUDE="LATITUDE_LONGITUDE",e.NUMBER="NUMBER",e.PERCENT="PERCENT",e.TEXT="TEXT",e.BOOLEAN="BOOLEAN",e.URL="URL",e.IMAGE="IMAGE",e.CURRENCY_AED="CURRENCY_AED",e.CURRENCY_ALL="CURRENCY_ALL",e.CURRENCY_ARS="CURRENCY_ARS",e.CURRENCY_AUD="CURRENCY_AUD",e.CURRENCY_BDT="CURRENCY_BDT",e.CURRENCY_BGN="CURRENCY_BGN",e.CURRENCY_BOB="CURRENCY_BOB",e.CURRENCY_BRL="CURRENCY_BRL",e.CURRENCY_CAD="CURRENCY_CAD",e.CURRENCY_CDF="CURRENCY_CDF",e.CURRENCY_CHF="CURRENCY_CHF",e.CURRENCY_CLP="CURRENCY_CLP",e.CURRENCY_CNY="CURRENCY_CNY",e.CURRENCY_COP="CURRENCY_COP",e.CURRENCY_CRC="CURRENCY_CRC",e.CURRENCY_CZK="CURRENCY_CZK",e.CURRENCY_DKK="CURRENCY_DKK",e.CURRENCY_DOP="CURRENCY_DOP",e.CURRENCY_EGP="CURRENCY_EGP",e.CURRENCY_ETB="CURRENCY_ETB",e.CURRENCY_EUR="CURRENCY_EUR",e.CURRENCY_GBP="CURRENCY_GBP",e.CURRENCY_HKD="CURRENCY_HKD",e.CURRENCY_HRK="CURRENCY_HRK",e.CURRENCY_HUF="CURRENCY_HUF",e.CURRENCY_IDR="CURRENCY_IDR",e.CURRENCY_ILS="CURRENCY_ILS",e.CURRENCY_INR="CURRENCY_INR",e.CURRENCY_IRR="CURRENCY_IRR",e.CURRENCY_ISK="CURRENCY_ISK",e.CURRENCY_JMD="CURRENCY_JMD",e.CURRENCY_JPY="CURRENCY_JPY",e.CURRENCY_KRW="CURRENCY_KRW",e.CURRENCY_LKR="CURRENCY_LKR",e.CURRENCY_LTL="CURRENCY_LTL",e.CURRENCY_MNT="CURRENCY_MNT",e.CURRENCY_MVR="CURRENCY_MVR",e.CURRENCY_MXN="CURRENCY_MXN",e.CURRENCY_MYR="CURRENCY_MYR",e.CURRENCY_NOK="CURRENCY_NOK",e.CURRENCY_NZD="CURRENCY_NZD",e.CURRENCY_PAB="CURRENCY_PAB",e.CURRENCY_PEN="CURRENCY_PEN",e.CURRENCY_PHP="CURRENCY_PHP",e.CURRENCY_PKR="CURRENCY_PKR",e.CURRENCY_PLN="CURRENCY_PLN",e.CURRENCY_RON="CURRENCY_RON",e.CURRENCY_RSD="CURRENCY_RSD",e.CURRENCY_RUB="CURRENCY_RUB",e.CURRENCY_SAR="CURRENCY_SAR",e.CURRENCY_SEK="CURRENCY_SEK",e.CURRENCY_SGD="CURRENCY_SGD",e.CURRENCY_THB="CURRENCY_THB",e.CURRENCY_TRY="CURRENCY_TRY",e.CURRENCY_TWD="CURRENCY_TWD",e.CURRENCY_TZS="CURRENCY_TZS",e.CURRENCY_UAH="CURRENCY_UAH",e.CURRENCY_USD="CURRENCY_USD",e.CURRENCY_UYU="CURRENCY_UYU",e.CURRENCY_VEF="CURRENCY_VEF",e.CURRENCY_VND="CURRENCY_VND",e.CURRENCY_YER="CURRENCY_YER",e.CURRENCY_ZAR="CURRENCY_ZAR"}(t.FieldType||(t.FieldType={})),function(e){e.VIZ_READY="vizReady"}(C=t.ClientMessageType||(t.ClientMessageType={})),t.timeout=function(e){return n(r,void 0,void 0,function(){return o(this,function(t){return[2,new Promise(function(t,R){setTimeout(function(){return t(e)},e)})]})})},t.iframeLoaded=function(){return n(r,void 0,void 0,function(){return o(this,function(e){return[2,new Promise(function(e,t){window.addEventListener("load",function(t){e(t)})})]})})},t.postMessage=function(e){window.parent.postMessage(e,"*")},t.getWidth=function(){return document.body.clientWidth},t.getHeight=function(){return document.documentElement.clientHeight},t.getComponentId=function(){return s(window.parent.location.href,!0).query.id},t.delayedMessage=function(e,R){return n(r,void 0,void 0,function(){return o(this,function(n){switch(n.label){case 0:return[4,t.iframeLoaded()];case 1:return n.sent(),[4,t.timeout(R)];case 2:return n.sent(),t.postMessage(e),[2]}})})},t.subscribeToData=function(e){return n(r,void 0,void 0,function(){var R,n;return o(this,function(o){switch(o.label){case 0:return[4,t.iframeLoaded()];case 1:return o.sent(),R=function(t){if("RENDER"===t.data.type){var R=E.transformData(t);e(R)}},window.addEventListener("message",R),n=t.getComponentId(),t.postMessage({componentId:n,type:C.VIZ_READY}),[2,function(){return window.removeEventListener("message",R)}]}})})}},"./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no static exports found */function(e,t,R){"use strict";Object.defineProperty(t,"__esModule",{value:!0});
/*!
  Copyright 2018 Google LLC

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  https://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
var n=R(/*! ./impl */"./src/impl.ts");t.delayedMessage=n.delayedMessage,t.subscribeToData=n.subscribeToData,t.getWidth=n.getWidth,t.getHeight=n.getHeight}})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
