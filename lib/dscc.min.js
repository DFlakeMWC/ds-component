!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("dscc",[],t):"object"==typeof exports?exports.dscc=t():e.dscc=t()}(window,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s="./src/index.ts")}({"./node_modules/querystringify/index.js":
/*!**********************************************!*\
  !*** ./node_modules/querystringify/index.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e){return decodeURIComponent(e.replace(/\+/g," "))}t.stringify=function(e,t){t=t||"";var n=[];for(var o in"string"!=typeof t&&(t="?"),e)r.call(e,o)&&n.push(encodeURIComponent(o)+"="+encodeURIComponent(e[o]));return n.length?t+n.join("&"):""},t.parse=function(e){for(var t,n=/([^=?&]+)=?([^&]*)/g,r={};t=n.exec(e);){var s=o(t[1]),i=o(t[2]);s in r||(r[s]=i)}return r}},"./node_modules/requires-port/index.js":
/*!*********************************************!*\
  !*** ./node_modules/requires-port/index.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(e,t){if(t=t.split(":")[0],!(e=+e))return!1;switch(t){case"http":case"ws":return 80!==e;case"https":case"wss":return 443!==e;case"ftp":return 21!==e;case"gopher":return 70!==e;case"file":return!1}return 0!==e}},"./node_modules/url-parse/index.js":
/*!*****************************************!*\
  !*** ./node_modules/url-parse/index.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){"use strict";(function(t){var r=n(/*! requires-port */"./node_modules/requires-port/index.js"),o=n(/*! querystringify */"./node_modules/querystringify/index.js"),s=/^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i,i=/^[A-Za-z][A-Za-z0-9+-.]*:\/\//,a=[["#","hash"],["?","query"],["/","pathname"],["@","auth",1],[NaN,"host",void 0,1,1],[/:(\d+)$/,"port",void 0,1],[NaN,"hostname",void 0,1,1]],u={hash:1,query:1};function c(e){var n,r={},o=typeof(e=e||t.location||{});if("blob:"===e.protocol)r=new f(unescape(e.pathname),{});else if("string"===o)for(n in r=new f(e,{}),u)delete r[n];else if("object"===o){for(n in e)n in u||(r[n]=e[n]);void 0===r.slashes&&(r.slashes=i.test(e.href))}return r}function l(e){var t=s.exec(e);return{protocol:t[1]?t[1].toLowerCase():"",slashes:!!t[2],rest:t[3]}}function f(e,t,n){if(!(this instanceof f))return new f(e,t,n);var s,i,u,p,d,h,m=a.slice(),y=typeof t,g=this,v=0;for("object"!==y&&"string"!==y&&(n=t,t=null),n&&"function"!=typeof n&&(n=o.parse),t=c(t),s=!(i=l(e||"")).protocol&&!i.slashes,g.slashes=i.slashes||s&&t.slashes,g.protocol=i.protocol||t.protocol||"",e=i.rest,i.slashes||(m[2]=[/(.*)/,"pathname"]);v<m.length;v++)u=(p=m[v])[0],h=p[1],u!=u?g[h]=e:"string"==typeof u?~(d=e.indexOf(u))&&("number"==typeof p[2]?(g[h]=e.slice(0,d),e=e.slice(d+p[2])):(g[h]=e.slice(d),e=e.slice(0,d))):(d=u.exec(e))&&(g[h]=d[1],e=e.slice(0,d.index)),g[h]=g[h]||s&&p[3]&&t[h]||"",p[4]&&(g[h]=g[h].toLowerCase());n&&(g.query=n(g.query)),s&&t.slashes&&"/"!==g.pathname.charAt(0)&&(""!==g.pathname||""!==t.pathname)&&(g.pathname=function(e,t){for(var n=(t||"/").split("/").slice(0,-1).concat(e.split("/")),r=n.length,o=n[r-1],s=!1,i=0;r--;)"."===n[r]?n.splice(r,1):".."===n[r]?(n.splice(r,1),i++):i&&(0===r&&(s=!0),n.splice(r,1),i--);return s&&n.unshift(""),"."!==o&&".."!==o||n.push(""),n.join("/")}(g.pathname,t.pathname)),r(g.port,g.protocol)||(g.host=g.hostname,g.port=""),g.username=g.password="",g.auth&&(p=g.auth.split(":"),g.username=p[0]||"",g.password=p[1]||""),g.origin=g.protocol&&g.host&&"file:"!==g.protocol?g.protocol+"//"+g.host:"null",g.href=g.toString()}f.prototype={set:function(e,t,n){var s=this;switch(e){case"query":"string"==typeof t&&t.length&&(t=(n||o.parse)(t)),s[e]=t;break;case"port":s[e]=t,r(t,s.protocol)?t&&(s.host=s.hostname+":"+t):(s.host=s.hostname,s[e]="");break;case"hostname":s[e]=t,s.port&&(t+=":"+s.port),s.host=t;break;case"host":s[e]=t,/:\d+$/.test(t)?(t=t.split(":"),s.port=t.pop(),s.hostname=t.join(":")):(s.hostname=t,s.port="");break;case"protocol":s.protocol=t.toLowerCase(),s.slashes=!n;break;case"pathname":case"hash":if(t){var i="pathname"===e?"/":"#";s[e]=t.charAt(0)!==i?i+t:t}else s[e]=t;break;default:s[e]=t}for(var u=0;u<a.length;u++){var c=a[u];c[4]&&(s[c[1]]=s[c[1]].toLowerCase())}return s.origin=s.protocol&&s.host&&"file:"!==s.protocol?s.protocol+"//"+s.host:"null",s.href=s.toString(),s},toString:function(e){e&&"function"==typeof e||(e=o.stringify);var t,n=this,r=n.protocol;r&&":"!==r.charAt(r.length-1)&&(r+=":");var s=r+(n.slashes?"//":"");return n.username&&(s+=n.username,n.password&&(s+=":"+n.password),s+="@"),s+=n.host+n.pathname,(t="object"==typeof n.query?e(n.query):n.query)&&(s+="?"!==t.charAt(0)?"?"+t:t),n.hash&&(s+=n.hash),s}},f.extractProtocol=l,f.location=c,f.qs=o,e.exports=f}).call(this,n(/*! ./../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},"./src/data-studio-types.ts":
/*!**********************************!*\
  !*** ./src/data-studio-types.ts ***!
  \**********************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.DIMENSION=1]="DIMENSION",e[e.METRIC=2]="METRIC",e[e.MAX_RESULTS=3]="MAX_RESULTS"}(t.ConfigElementType||(t.ConfigElementType={}))},"./src/data-transform.ts":
/*!*******************************!*\
  !*** ./src/data-transform.ts ***!
  \*******************************/
/*! no static exports found */function(e,t,n){"use strict";var r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(t,"__esModule",{value:!0});var o=n(/*! ./data-studio-types */"./src/data-studio-types.ts");t.destructImage=function(e){var t=e.split("  ");return{originalUrl:t[0],proxiedUrl:t[1],altText:t[2]}};var s=function(e,t,n){var r,o,s,i,a=n(e[t]);return r=e,o=t,s=a,Object.assign({},r,((i={})[o]=s,i))};t.buildFieldsAndRows=function(e){e.rows.primaryRows[0];var n=e.data.reduce(function(e,t){return t.elements.filter(function(e){return e.type===o.ConfigElementType.DIMENSION||e.type===o.ConfigElementType.METRIC}).reduce(function(e,t){return e.push(t),e},[])},[]);if(2!==n.length)throw"Only configs with one metric and one dimension are supported. Your config:\n"+JSON.stringify(e.data);if(n[0].type!==o.ConfigElementType.DIMENSION)throw"Your first config element must be a dimension. Your first: "+n[0];if(n[1].type!==o.ConfigElementType.METRIC)throw"Your second config element must be a metric. Your first: "+n[0];var r,i,a=n[0],u=n[1],c=e.schema,l=c.map(function(e){return"DIMENSION"===e.concept?a:u}),f=function(e){return function(n){return(r=n,o=c,i=l,r.map(function(e,t){return[e,o[t],i[t]]})).reduce(function(e,n){var r=n[0],o=n[1],i=n[2];return s(e,i.id,function(e){var n=function(e,n){return"IMAGE"===n.semantic?t.destructImage(e):e}(r,o);return void 0===e?[n]:e.concat([n])})},{dataTag:e});var r,o,i}};return{fields:(r=c,i=l,r.map(function(e,t){return[e,i[t]]})).reduce(function(e,t){var n=t[0],r=t[1];return s(e,r.id,function(e){var t=function(e,t){return{id:e,concept:t.concept,dataStudioId:t.name,name:t.label,type:function(e){return"CURRENCY"===e.semantic?"CURRENCY_"+e.semanticOption:e.semantic}(t)}}(r.id,n);return void 0===e?[t]:e.concat([t])})},{}),rows:e.rows.comparisonRows.map(f("comparisonRow")).concat(e.rows.primaryRows.map(f("primaryRow")))}},t.transformData=function(e){return r({style:e.style,type:e.type},t.buildFieldsAndRows(e))}},"./src/impl.ts":
/*!*********************!*\
  !*** ./src/impl.ts ***!
  \*********************/
/*! no static exports found */function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(o,s){function i(e){try{u(r.next(e))}catch(e){s(e)}}function a(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(i,a)}u((r=r.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var n,r,o,s,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return s={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=r[2&s[0]?"return":s[0]?"throw":"next"])&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[0,o.value]),s[0]){case 0:case 1:o=s;break;case 4:return i.label++,{value:s[1],done:!1};case 5:i.label++,r=s[1],s=[0];continue;case 7:s=i.ops.pop(),i.trys.pop();continue;default:if(!(o=(o=i.trys).length>0&&o[o.length-1])&&(6===s[0]||2===s[0])){i=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){i.label=s[1];break}if(6===s[0]&&i.label<o[1]){i.label=o[1],o=s;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(s);break}o[2]&&i.ops.pop(),i.trys.pop();continue}s=t.call(e,i)}catch(e){s=[6,e],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}},s=this;Object.defineProperty(t,"__esModule",{value:!0});
/*!
  Copyright 2018 Google LLC

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  https://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
var i=n(/*! ./data-transform */"./src/data-transform.ts"),a=n(/*! url-parse */"./node_modules/url-parse/index.js");t.timeout=function(e){return r(s,void 0,void 0,function(){return o(this,function(t){return[2,new Promise(function(t,n){setTimeout(function(){return t(e)},e)})]})})},t.iframeLoaded=function(){return r(s,void 0,void 0,function(){return o(this,function(e){return[2,new Promise(function(e,t){window.addEventListener("load",function(t){e(t)})})]})})},t.postMessage=function(e){window.parent.postMessage(e,"*")},t.getWidth=function(){return document.body.clientWidth},t.getHeight=function(){return document.documentElement.clientHeight},t.getComponentId=function(){return a(window.parent.location.href,!0).query.componentId},t.delayedMessage=function(e,n){return r(s,void 0,void 0,function(){return o(this,function(r){switch(r.label){case 0:return[4,t.iframeLoaded()];case 1:return r.sent(),[4,t.timeout(n)];case 2:return r.sent(),t.postMessage(e),[2]}})})},t.subscribeToData=function(e,n){return void 0===n&&(n={transform:i.transformData}),r(s,void 0,void 0,function(){var r,s,i;return o(this,function(o){switch(o.label){case 0:return r=n.transform,[4,t.iframeLoaded()];case 1:return o.sent(),s=function(t){if("RENDER"===t.data.type){var n=t.data;e(r(n))}},window.addEventListener("message",s),i=t.getComponentId(),t.postMessage({componentId:i,type:"vizReady"}),[2,function(){return window.removeEventListener("message",s)}]}})})}},"./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});
/*!
  Copyright 2018 Google LLC

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  https://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
var r=n(/*! ./impl */"./src/impl.ts");t.delayedMessage=r.delayedMessage,t.subscribeToData=r.subscribeToData,t.getWidth=r.getWidth,t.getHeight=r.getHeight}})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
